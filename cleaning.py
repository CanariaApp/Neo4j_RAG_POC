#!/usr/bin/env python
#Cleans StackOverflow CSV files generated by create_csvs.py by removing relationships that don't connect to existing nodes

import csv
from tqdm import tqdm
import sys
from os.path import join

PATH = sys.argv[1]

def load_node_ids(file_path, id_field):
    with open(file_path, 'r',encoding='utf-8') as file:
        reader = csv.DictReader(file)
        return set(row[id_field] for row in reader)

def validate_relationships(relationships_file, start_id_field, end_id_field, valid_start_ids, valid_end_ids):
    valid_rels = []
    invalid_rels = []
    with open(relationships_file, 'r',encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in tqdm(reader):
            start_id = row[start_id_field]
            end_id = row[end_id_field]
            if start_id in valid_start_ids and end_id in valid_end_ids:
                valid_rels.append(row)
            else:
                invalid_rels.append(row)
    return valid_rels, invalid_rels

def update_csv(file_path, valid_rels, fieldnames):
    with open(file_path, 'w', newline='',encoding='utf-8') as file:
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(valid_rels)

def validate_and_update(relationships_file, updated_relationships_file, node_ids_1, node_ids_2, fieldname_1, fieldname_2 ):
    # Validate relationships
    valid_rels, invalid_rels = validate_relationships(
        relationships_file,
        fieldname_1,
        fieldname_2,
        node_ids_1,
        node_ids_2
    )   
    # Invalid relationships
    if len(invalid_rels):
        print("%d Invalid relationships found:"%(len(invalid_rels)))
        for i,rel in enumerate(invalid_rels):
            print(rel)
            if (i>10): 
                print("...")
                break
    
    # Update the CSV with valid relationships
    print(f"Saving Updated relationships to {updated_relationships_file}")
    update_csv(updated_relationships_file, valid_rels, [fieldname_1, fieldname_2]) 
    print("Done!")

def main():
    # File paths   
    posts_file = join(PATH,'posts.csv')
    users_file = join(PATH,'users.csv')
    tags_file = join(PATH,'tags.csv')

    
    # Load node IDs
    print("Loading node IDs, this can take a while...")
    user_node_ids = load_node_ids(users_file, 'userId:ID(User)')
    print("\tUser node IDs loaded")
    post_node_ids = load_node_ids(posts_file, 'postId:ID(Post)')
    print("\tPost node IDs loaded")
    tag_node_ids = load_node_ids(tags_file, 'tagId:ID(Tag)')
    print("\tTag node IDs loaded")
    
    print("Validating User-Post relationships...")
    validate_and_update(
        join(PATH,'users_posts_rel_raw.csv'),
        join(PATH,'users_posts_rel.csv'),
        user_node_ids, post_node_ids,
        ':START_ID(User)',
        ':END_ID(Post)'
    )
    
    print("Validating Post-Answer relationships...")
    validate_and_update(
        join(PATH,'posts_answers_raw.csv'),
        join(PATH,'posts_answers.csv'),
        post_node_ids, post_node_ids,
        ':START_ID(Post)',
        ':END_ID(Post)'
    )
    
    print("Validating Post-Answer relationships...")
    validate_and_update(
        join(PATH,'posts_rel_raw.csv'),
        join(PATH,'posts_rel.csv'),
        post_node_ids, post_node_ids,
        ':START_ID(Post)',
        ':END_ID(Post)'
    )
    
    print("Validating Post-Tag relationships...")
    validate_and_update(
        join(PATH,'tags_posts_rel_raw.csv'),
        join(PATH,'tags_posts_rel.csv'),
        post_node_ids, tag_node_ids,
        ':START_ID(Post)',
        ':END_ID(Tag)'
    )
    



if __name__ == "__main__":
    main()
